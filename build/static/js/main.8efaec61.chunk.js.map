{"version":3,"sources":["components/InviteForm/InviteForm.module.scss","containers/MainScreen/MainScreen.module.scss","containers/EnterScreen/EnterScreen.module.scss","components/UI/Input/Input.module.scss","components/RoomList/RoomList.module.scss","components/SendMessage/SendMessage.module.scss","components/Messages/Messages.module.scss","components/UI/Input/Input.js","containers/EnterScreen/EnterScreen.js","components/Title/Title.js","components/Messages/Messages.js","components/SendMessage/SendMessage.js","server/clientServer.js","components/InviteForm/InviteForm.js","components/Room/Room.js","components/RoomList/RoomList.js","containers/MainScreen/MainScreen.js","App.js","serviceWorker.js","index.js","components/Title/Title.module.scss"],"names":["module","exports","props","inputType","type","cls","classes","Input","htmlFor","Math","random","valid","touched","isValid","push","invalid","className","join","label","id","value","placeholder","onChange","errorMessage","EnterScreen","state","isInputValid","isInputTouched","onInputChange","evt","target","trim","setState","onInputLoginChange","onSubmit","preventDefault","EnterScreen__container","this","onClick","onLoginClick","disabled","React","Component","Title","title","Title__btnWrapper","Title__btnMembers","document","querySelector","classList","toggle","onMembershipsClick","users","length","aria-label","map","name","index","key","Title__btnInvite","xmlns","width","height","viewBox","d","Messages","Messages__list","messages","message","Messages__name","Messages__text","text","Messages__time","time","hours","minutes","SendMessage","onSubmitMessage","socket","openSocket","registerNewUser","login","room","emit","Promise","resolve","reject","on","err","userId","getSocket","InviteForm","roomNumber","sendInvite","inviteFrom","invite","inviteUser","parentNode","InviteForm__closeBtn","errorMsg","InviteForm__input","InviteForm__sendBtn","Room","initialstate","user","errMsg","inputMessage","date","Date","msg","sendMessage","getHours","getMinutes","nextProps","messagesList","scrollTop","scrollHeight","data","ChatList","rooms","ChatList__item","onLinkClick","MainScreen","renderChats","activeRoom","MainScreen__chat","MainScreen__chatHidden","getAttribute","loading","find","inviteForm","forEach","filter","MainScreen__container","Fragment","RoomList","App","isLogged","then","catch","finally","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,WAAa,+BAA+B,KAAO,yBAAyB,kBAAoB,sCAAsC,oBAAsB,wCAAwC,qBAAuB,2C,mBCA7OD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,sBAAwB,0CAA0C,iBAAmB,qCAAqC,uBAAyB,6C,mBCAjND,EAAOC,QAAU,CAAC,YAAc,iCAAiC,uBAAyB,8C,mBCA1FD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,QAAU,yB,mBCAzDD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,eAAiB,mC,mBCAzED,EAAOC,QAAU,CAAC,YAAc,mC,8FCAhCD,EAAOC,QAAU,CAAC,eAAiB,iCAAiC,eAAiB,iCAAiC,eAAiB,iCAAiC,eAAiB,iCAAiC,SAAW,6B,yJCUtN,eAAAC,GAEX,IAAMC,EAAYD,EAAME,MAAQ,OAC1BC,EAAM,CAACC,IAAQC,OACfC,EAAO,UAAML,EAAN,YAAmBM,KAAKC,UAMrC,OAhBJ,YAAoC,IAAlBC,EAAiB,EAAjBA,MACd,OAD+B,EAAVC,SAGdD,EASHE,CAAQX,IACRG,EAAIS,KAAKR,IAAQS,SAIjB,yBAAKC,UAAWX,EAAIY,KAAK,MACrB,2BAAOT,QAASA,GAAUN,EAAMgB,OAChC,2BACId,KAAMD,EACNgB,GAAIX,EACJY,MAAOlB,EAAMkB,MACbC,YAAanB,EAAMmB,YACnBC,SAAUpB,EAAMoB,SAChBN,UAAWd,EAAMI,UAErB,8BAAOJ,EAAMqB,gBC4BVC,E,4MAtDXC,MAAQ,CACJC,cAAc,EACdC,gBAAgB,G,EAGpBC,cAAgB,SAACC,GACb,IAAIH,GAAe,EAKnBA,EAF6B,KAA5BG,EAAIC,OAAOV,MAAMW,OAMlB,EAAKC,SAAS,CACVN,eACAC,gBAVmB,IAanBD,GACA,EAAKxB,MAAM+B,mBAAmBJ,EAAIC,OAAOV,Q,uDAKvC,IAAD,OACL,OACE,yBAAKJ,UAAWV,IAAQkB,aACtB,6BACI,sHACA,0BAAMU,SAAU,SAACL,GAASA,EAAIM,mBAC1B,yBAAKnB,UAAWV,IAAQ8B,wBACpB,kBAAC7B,EAAD,CACCI,MAAO0B,KAAKZ,MAAMC,aAClBd,QAASyB,KAAKZ,MAAME,eACpBL,SAAU,SAACO,GAAS,EAAKD,cAAcC,IACvCN,aAAcc,KAAKnC,MAAMqB,aACzBF,YAAY,uBAEb,4BAAQjB,KAAK,SACbkC,QAAS,SAACT,GAAS,EAAK3B,MAAMqC,aAAaV,IAC3CW,UAAWH,KAAKZ,MAAMC,cAFtB,0C,GAzCEe,IAAMC,W,gBCDjB,WAAAxC,GAaX,OACI,yBAAKc,UAAWV,IAAQqC,OACpB,wFAAkBzC,EAAM0C,QACxB,yBAAK5B,UAAWV,IAAQuC,mBACpB,4BAAQ7B,UAAWV,IAAQwC,kBAAmBF,MAAM,oLAAmCN,QAAS,SAACT,IAflF,SAACA,GACxBA,EAAIM,iBACSY,SAASC,cAAT,2BAA2C9C,EAAM0C,QACzDK,UAAUC,OAAO,QAY4FC,CAAmBtB,IAAOzB,KAAK,UAAzI,UAAsJF,EAAMkD,MAAMC,OAAlK,WACA,wBACKrC,UAAS,0BAAqBd,EAAM0C,MAA3B,SACTU,aAAW,6OAEXpD,EAAMkD,MAAMG,KAAI,SAACC,EAAMC,GACpB,OACC,wBAAIC,IAAKF,EAAOC,GACVD,OAKf,4BAAQxC,UAAWV,IAAQqD,iBAAkBrB,QAAS,SAACT,GArBlDkB,SAASC,cAAT,uBAAuC9C,EAAM0C,QACrDK,UAAUC,OAAO,SAoBuEI,aAAW,0LAAqCV,MAAM,4HAAwBxC,KAAK,UACpK,yBAAKwD,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aACnE,0BAAMC,EAAE,yhB,gBCjCjB,WAAA9D,GACX,OACI,yBAAKc,UAAWV,IAAQ2D,UACpB,wBAAIjD,UAAWV,IAAQ4D,gBACtBhE,EAAMiE,SAASZ,KAAI,SAACa,EAASX,GAC1B,OACI,wBAAIC,IAAKD,GACL,0BAAMzC,UAAWV,IAAQ+D,gBAAiBD,EAAQZ,MAClD,0BAAMxC,UAAWV,IAAQgE,gBAAiBF,EAAQG,MAClD,0BAAMvD,UAAWV,IAAQkE,gBAAiBJ,EAAQK,KAAKC,MAAvD,IAA+DN,EAAQK,KAAKE,gB,iBCRrF,WAAAzE,GACX,OACI,yBAAKc,UAAWV,IAAQsE,aACpB,0BAAM1C,SAAUhC,EAAM2E,iBAClB,kBAACtE,EAAD,CACIc,YAAY,0GACZjB,KAAK,Y,yBCTnB0E,E,MAASC,GAAW,0BAEpBC,EAAkB,SAACC,EAAOC,GAE5B,OADAJ,EAAOK,KAAK,UAAW,CAAC3B,KAAMyB,EAAOC,KAAMA,IACpC,IAAIE,SAAQ,SAACC,EAASC,GACzBR,EAAOS,GAAG,cAAc,SAACC,GACrBF,EAAOE,MAEXV,EAAOS,GAAG,WAAW,SAACE,GAClBJ,EAAQI,UASdC,EAAY,WACd,OAAOZ,GCfI,WAAA5E,GAEX,IAAMG,EAAM,CAACC,IAAQqF,WAAT,sBAAoCzF,EAAM0F,aAEhDC,EAAa,SAAChE,EAAKiE,EAAYF,GACjC/D,EAAIM,iBDaO,SAAC4D,GAChBjB,EAAOK,KAAK,aAAcY,GCPtBC,CALe,CACXxC,KAFU3B,EAAIC,OAAOmE,WAAWjD,cAAc,SAElC5B,MACZ8D,KAAMU,EACNE,WAAYA,KAUpB,OACI,0BAAM9E,UAAWX,EAAIY,KAAK,MACtB,4BACID,UAAWV,IAAQ4F,qBACnB9F,KAAK,SACLkD,aAAW,6HACXV,MAAM,6HACNN,QAAS,SAACT,GAXLkB,SAASC,cAAT,uBAAuC9C,EAAM0F,aACrD3C,UAAUC,OAAO,UAYd,yBAAKU,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aACnE,0BAAMC,EAAE,mJAGhB,kBAACzD,EAAD,CACIgB,aAAcrB,EAAMiG,SACpB7F,QAASA,IAAQ8F,kBACjB/E,YAAY,gGAChB,4BAAQL,UAAWV,IAAQ+F,oBAAsB/D,QAAS,SAACT,GAASgE,EAAWhE,EAAK3B,EAAM4F,WAAY5F,EAAM0F,aAAcxF,KAAK,UAA/H,+HClCN0E,EAASY,IA0FAY,E,kDArFX,WAAYpG,GAAQ,IAAD,sBACf,IAAMqG,EAAe,CACjBpC,SAAU,GACVqC,KAAMtG,EAAMsG,KACZtB,KAAMhF,EAAMgF,KACZuB,OAAQ,IALG,OAOf,cAAMF,IAgCV1B,gBAAkB,SAAChD,GACfA,EAAIM,iBACJ,IAAIV,EAAQ,EAAKA,MAEXiF,EADO7E,EAAIC,OACSkB,cAAc,SAExC,GAAiC,KAA9B0D,EAAatF,MAAMW,OAAe,CACjC,IAAM4E,EAAO,IAAIC,MF5CT,SAACC,GACjB/B,EAAOK,KAAK,gBAAiB0B,GEsDrBC,CAVY,CACRtD,KAAM/B,EAAM+E,KAAKhD,KACjB0B,KAAMzD,EAAMyD,KAAK/D,GACjBoD,KAAMmC,EAAatF,MACnBqD,KAAM,CACFC,MAAOiC,EAAKI,WACZpC,QAASgC,EAAKK,gBAMtBN,EAAatF,MAAQ,KAlDzB,EAAKK,MAAL,eACO8E,GAVQ,E,gEAcCU,GAChB,IAAMC,EAAenE,SAASC,cAAc,IAAMiE,EAAUjG,UAAhB,OAC5CkG,EAAaC,UAAYD,EAAaE,e,0CAGrB,IAAD,OAChBtC,EAAOS,GAAG,cAAc,SAAC8B,GACrB,IAAM5F,EAAQ,EAAKA,MAChB4F,EAAKnC,OAAS,EAAKzD,MAAMyD,KAAK/D,KAC7BM,EAAM0C,SAASrD,KAAKuG,GACpB,EAAKrF,SAAL,eACMP,QAKdqD,EAAOS,GAAG,gBAAgB,SAAC8B,GACvB,IAAM5F,EAAQ,EAAKA,MACnBA,EAAMgF,OAASY,EAAK9C,KACpB,EAAKvC,SAAL,eACOP,S,+BA8BX,OACE,0BACET,UAAWqB,KAAKnC,MAAMc,UACtBkE,KAAM7C,KAAKnC,MAAMgF,KAAK/D,IAEtB,kBAACwB,EAAD,CACIC,MAAOP,KAAKnC,MAAMgF,KAAK/D,GACvBiC,MAAOf,KAAKnC,MAAMgF,KAAK9B,QAE3B,kBAACuC,EAAD,CACIC,WAAYvD,KAAKZ,MAAMyD,KAAK/D,GAC5B2E,WAAYzD,KAAKZ,MAAM+E,KAAKhD,KAC5B2C,SAAU9D,KAAKZ,MAAMgF,SAEzB,kBAACxC,EAAD,CAAUE,SAAU9B,KAAKZ,MAAM0C,WAC/B,kBAACS,EAAD,CAAaC,gBAAiBxC,KAAKwC,uB,GAjF5BpC,IAAMC,W,iBCRV,WAAAxC,GACX,OACI,yBAAKc,UAAWV,IAAQgH,UACpB,wBAAItG,UAAU,mBAAd,6EACA,4BACKd,EAAMqH,MAAMhE,KAAI,SAAA2B,GACb,OACI,wBAAIlE,UAAWV,IAAQkH,eAAgB9D,IAAKwB,EAAK/D,IAC7C,uBACAmB,QAASpC,EAAMuH,YACftG,GAAI+D,EAAK/D,IAEJ+D,EAAK/D,W,iBCRhC2D,EAASY,IAgGAgC,E,kDA5FX,WAAYxH,GAAQ,IAAD,8BACf,cAAMA,IAwCVyH,YAAc,WACV,OACI,EAAKlG,MAAM+E,KAAKe,MAAMhE,KAAI,SAAC2B,EAAMzB,GAC7B,IAAIzC,EAAY,GAQhB,OAJAA,EAFCkE,EAAK/D,MAAQ,EAAKM,MAAMmG,WAEbtH,IAAQuH,iBAERvH,IAAQwH,uBAGhB,kBAAC,EAAD,CACI9G,UAAWA,EACXwF,KAAM,EAAK/E,MAAM+E,KACjBtB,KAAMA,EACNxB,IAAKD,EAAQyB,EAAK/D,SAzDnB,EAgEnBsG,YAAc,SAAC5F,GACX,IAAM+F,EAAY/F,EAAIC,OAAOiG,aAAa,MAC1C,EAAK/F,SAAS,CACV4F,gBAhEJ,EAAKnG,MAAQ,CACTmG,WAAY1H,EAAMsG,KAAKe,MAAM,GAAGpG,GAChC6G,SAAS,EACTxB,KAAMtG,EAAMsG,MAND,E,gEAUE,IAAD,OAChB1B,EAAOS,GAAG,aAAa,SAAC8B,GACpB,IAAM5F,EAAQ,EAAKA,MACnBA,EAAM+E,KAAKe,MAAMzG,KAAKuG,GACtB,EAAKrF,SAAL,eACOP,OAIXqD,EAAOS,GAAG,iBAAiB,SAAC8B,GACxB,IAAM5F,EAAQ,EAAKA,MACNA,EAAM+E,KAAKe,MAAMU,MAAK,SAAC/C,GAAD,OAAUA,EAAK/D,KAAOkG,EAAKlG,MACzDiC,MAAQiE,EAAKjE,MAClB3B,EAAMyG,YAAa,EACnB,EAAKlG,SAAL,eACOP,OAIXqD,EAAOS,GAAG,oBAAoB,SAAC8B,GAC3B,IAAM5F,EAAQ,EAAKA,MACnBA,EAAM+E,KAAKe,MAAMY,SAAQ,SAACjD,GACtBA,EAAK9B,MAAQ8B,EAAK9B,MAAMgF,QAAO,SAAC5B,GAAD,OAAUA,IAASa,QAGtD,EAAKrF,SAAL,eACOP,S,+BAmCL,IAAD,OACL,OACE,yBAAKT,UAAWV,IAAQoH,YACrB,yBAAK1G,UAAWV,IAAQ+H,uBAEjBhG,KAAKZ,MAAMuG,QACT,KACA,kBAAC,IAAMM,SAAP,KACE,kBAACC,EAAD,CACAhB,MAASlF,KAAKZ,MAAM+E,KAAKe,MACzBE,YAAe,SAAC5F,GAAS,EAAK4F,YAAY5F,MAEzCQ,KAAKsF,qB,GArFLlF,IAAMC,WC0DhB8F,E,4MA5Db/G,MAAQ,CACNgH,UAAU,EACVjC,KAAM,CACJrF,GAAI,KACJqC,KAAM,GACN+D,MAAO,IAEThG,aAAc,I,EAOhBgB,aAAe,SAACV,GACdA,EAAIM,iBACJ,IAAMV,EAAQ,EAAKA,MAEnBuD,EAAgBvD,EAAM+E,KAAKhD,KAAM/B,EAAM+E,KAAKtB,MACzCwD,MAAK,SAACrB,GACL5F,EAAMgH,UAAW,EACjBhH,EAAM+E,KAAKrF,GAAIkG,EAAK5B,OACpBhE,EAAM+E,KAAKe,MAAMzG,KAAKuG,EAAKnC,SAE5ByD,OAAM,SAACnD,GACN/D,EAAMgH,UAAW,EACjBhH,EAAM+E,KAAKhD,KAAO,GAClB/B,EAAM+E,KAAKe,MAAQ,GACnB9F,EAAMF,aAAeiE,KAEtBoD,SAAQ,WACP,EAAK5G,SAAL,eACKP,Q,EAKXQ,mBAAqB,SAACb,GACpB,IAAMK,EAAQ,EAAKA,MACnBA,EAAM+E,KAAKhD,KAAOpC,EAClB,EAAKY,SAAS,CACZP,W,oGAKF,OACE,yBAAKT,UAAU,OACXqB,KAAKZ,MAAMgH,SACb,kBAAC,EAAD,CAAYjC,KAAMnE,KAAKZ,MAAM+E,OAE7B,kBAAC,EAAD,CACEjE,aAAcF,KAAKE,aACnBN,mBAAoBI,KAAKJ,mBACzBV,aAAgBc,KAAKZ,MAAMF,oB,GAxDnBkB,IAAMC,WCOJmG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrG,SAASsG,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdf,OAAM,SAAAgB,GACLC,QAAQD,MAAMA,EAAMvF,a,kBExI5BpE,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,iBAAmB,gCAAgC,kBAAoB,iCAAiC,kBAAoB,oC","file":"static/js/main.8efaec61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"InviteForm\":\"InviteForm_InviteForm__1qRKh\",\"none\":\"InviteForm_none__3oq5L\",\"InviteForm__input\":\"InviteForm_InviteForm__input__ZrSMB\",\"InviteForm__sendBtn\":\"InviteForm_InviteForm__sendBtn__27L2D\",\"InviteForm__closeBtn\":\"InviteForm_InviteForm__closeBtn__3nNC9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainScreen\":\"MainScreen_MainScreen__3h_O-\",\"MainScreen__container\":\"MainScreen_MainScreen__container__3UAEY\",\"MainScreen__chat\":\"MainScreen_MainScreen__chat__1QF4Y\",\"MainScreen__chatHidden\":\"MainScreen_MainScreen__chatHidden__1CvFO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"EnterScreen\":\"EnterScreen_EnterScreen__3UYiH\",\"EnterScreen__container\":\"EnterScreen_EnterScreen__container__2gNhh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__SNRl4\",\"invalid\":\"Input_invalid__1ZOur\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatList\":\"RoomList_ChatList__35jeu\",\"ChatList__item\":\"RoomList_ChatList__item__1z7eS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SendMessage\":\"SendMessage_SendMessage__36wf3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Messages__list\":\"Messages_Messages__list__1Lc5l\",\"Messages__name\":\"Messages_Messages__name__14m1u\",\"Messages__time\":\"Messages_Messages__time__2j5Nc\",\"Messages__text\":\"Messages_Messages__text__3UlYN\",\"Messages\":\"Messages_Messages__cNd55\"};","import React from 'react';\nimport classes from './Input.module.scss'\n\n\n\nfunction isValid({valid, touched}) {\n    if(!touched) return true;\n    \n    return valid;\n}\n\nexport default props => {\n\n    const inputType = props.type || 'text';\n    const cls = [classes.Input];\n    const htmlFor = `${inputType}-${Math.random()}`;\n\n    if(!isValid(props)) {\n        cls.push(classes.invalid)\n    }\n\n    return(\n        <div className={cls.join(' ')}>\n            <label htmlFor={htmlFor}>{props.label}</label>\n            <input\n                type={inputType}\n                id={htmlFor}\n                value={props.value}\n                placeholder={props.placeholder}\n                onChange={props.onChange}\n                className={props.classes}\n                />\n            <span>{props.errorMessage}</span>\n        </div>\n    );\n};","import React from 'react';\nimport classes from './EnterScreen.module.scss'\n\nimport Input from '../../components/UI/Input/Input';\n\nclass EnterScreen extends React.Component {\n    state = {\n        isInputValid: false,\n        isInputTouched: false\n    };\n\n    onInputChange = (evt) => {\n        let isInputValid = false;\n        const isInputTouched = true;\n        \n        (evt.target.value.trim() !== '') \n        ?\n        isInputValid = true\n        :\n        isInputValid = false;\n\n        this.setState({\n            isInputValid,\n            isInputTouched\n        })\n\n        if (isInputValid) {\n            this.props.onInputLoginChange(evt.target.value);\n        } \n\n    };\n\n    render() {\n        return(\n          <div className={classes.EnterScreen}>\n            <div>\n                <h1>Введите своё имя</h1>\n                <form onSubmit={(evt) => {evt.preventDefault()}}>\n                    <div className={classes.EnterScreen__container}>\n                        <Input\n                         valid={this.state.isInputValid}\n                         touched={this.state.isInputTouched}\n                         onChange={(evt) => {this.onInputChange(evt)}}\n                         errorMessage={this.props.errorMessage}\n                         placeholder=\"Имя\"\n                         />\n                        <button type=\"submit\"\n                        onClick={(evt) => {this.props.onLoginClick(evt)}}\n                        disabled={!this.state.isInputValid}\n                        >\n                        Войти\n                        </button>\n                    </div>\n                </form>\n            </div>\n          </div>\n        );\n    };\n};\n\nexport default EnterScreen;","import React from 'react';\nimport classes from './Title.module.scss';\n\n\nexport default props => {\n\n    const onMembershipsClick = (evt) => {\n        evt.preventDefault();\n        const list = document.querySelector(`.membership-list-${props.title}`);\n        list.classList.toggle('none');\n    };\n\n    const onInviteClick = (evt) => {\n        const form = document.querySelector(`.invite-form-${props.title}`);\n        form.classList.toggle('flex');\n    };\n\n    return(\n        <div className={classes.Title}>\n            <h2>{`Комната № ${props.title}`}</h2>\n            <div className={classes.Title__btnWrapper}>\n                <button className={classes.Title__btnMembers} title=\"Показать пользователей в комнате\" onClick={(evt) => {onMembershipsClick(evt)}} type=\"button\">{`${props.users.length} users`}</button>\n                <ul\n                     className={`membership-list-${props.title} none`}\n                     aria-label=\"Список пользователей, находящихся в комнате\"\n                 >\n                    {props.users.map((name, index) => {\n                        return(\n                         <li key={name + index}>\n                              {name}\n                        </li>\n                         )\n                     })}\n                </ul>\n                <button className={classes.Title__btnInvite} onClick={(evt) => {onInviteClick(evt)}} aria-label=\"Пригласить пользователя в комнату\"  title=\"Отправить приглашение\" type=\"button\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                        <path d=\"M8.602 3.7c-1.154 1.937-.635 5.227 1.424 9.025.93 1.712.697 3.02.338 3.815-.982 2.178-3.675 2.799-6.525 3.456-1.964.454-1.839.87-1.839 4.004h-1.995l-.005-1.241c0-2.52.199-3.975 3.178-4.663 3.365-.777 6.688-1.473 5.09-4.418-4.733-8.729-1.35-13.678 3.732-13.678 3.321 0 5.97 2.117 5.97 6.167 0 3.555-1.949 6.833-2.383 7.833h-2.115c.392-1.536 2.499-4.366 2.499-7.842 0-5.153-5.867-4.985-7.369-2.458zm15.398 15.8c0 2.485-2.017 4.5-4.5 4.5s-4.5-2.015-4.5-4.5 2.017-4.5 4.5-4.5 4.5 2.015 4.5 4.5zm-2-.5h-2v-2h-1v2h-2v1h2v2h1v-2h2v-1z\"/>\n                    </svg>\n                 </button>\n            </div>\n        </div>\n    );\n};","import React from 'react';\nimport classes from './Messages.module.scss';\n\nexport default props => {\n    return(\n        <div className={classes.Messages}>\n            <ul className={classes.Messages__list}>\n            {props.messages.map((message, index) => {\n                return(\n                    <li key={index}>\n                        <span className={classes.Messages__name}>{message.name}</span>\n                        <span className={classes.Messages__text}>{message.text}</span>\n                        <span className={classes.Messages__time}>{message.time.hours}:{message.time.minutes}</span>\n                    </li>\n                )\n            })}\n            </ul>\n        </div>\n    );\n};","import React from 'react';\nimport classes from './SendMessage.module.scss';\nimport Input from '../UI/Input/Input';\n\nexport default props => {\n    return(\n        <div className={classes.SendMessage}>\n            <form onSubmit={props.onSubmitMessage}>\n                <Input \n                    placeholder=\"Написать сообщение\"\n                    type=\"text\"\n                />\n            </form>\n        </div>\n    );\n};","import openSocket from 'socket.io-client';\nconst socket = openSocket('http://localhost:8000/');\n\nconst registerNewUser = (login, room) => {\n    socket.emit('newUser', {name: login, room: room});\n    return new Promise((resolve, reject) => {\n        socket.on('userExists', (err) => {\n            reject(err);\n        });\n        socket.on('userSet', (userId) => {\n            resolve(userId);\n        });\n    });\n};\n\nconst sendMessage = (msg) => {\n    socket.emit('createMessage', msg);\n};\n\nconst getSocket = () => {\n    return socket;\n}\n\nconst inviteUser = (invite) => {\n    socket.emit('inviteUser', invite);\n};\n\nconst recieveInvite = () => {\n    return new Promise((resolve, reject) => {\n        socket.on('newInvite', (data) => {\n            resolve(data);\n        })\n    })\n};\n\nexport { registerNewUser, sendMessage, inviteUser, recieveInvite, getSocket }","import React from 'react';\nimport Input from '../UI/Input/Input';\nimport classes from './InviteForm.module.scss';\nimport { inviteUser } from '../../server/clientServer';\n\nexport default props => {\n\n    const cls = [classes.InviteForm, `invite-form-${props.roomNumber}`];\n\n    const sendInvite = (evt, inviteFrom, roomNumber) => {\n        evt.preventDefault();\n        const input = evt.target.parentNode.querySelector('input');\n        const invite = {\n            name: input.value,\n            room: roomNumber,\n            inviteFrom: inviteFrom\n        };\n        inviteUser(invite);\n    };\n\n    const closeInviteForm = (evt) => {\n        const form = document.querySelector(`.invite-form-${props.roomNumber}`);\n        form.classList.toggle('flex');\n    };\n\n    return(\n        <form className={cls.join(' ')}>\n            <button \n                className={classes.InviteForm__closeBtn}\n                type=\"button\" \n                aria-label=\"Закрыть форму отправки\"\n                title=\"Закрыть форму отправки\"\n                onClick={(evt) => {closeInviteForm(evt)}}\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\n                    <path d=\"M24 20.188l-8.315-8.209 8.2-8.282-3.697-3.697-8.212 8.318-8.31-8.203-3.666 3.666 8.321 8.24-8.206 8.313 3.666 3.666 8.237-8.318 8.285 8.203z\"/>\n                </svg>\n            </button>\n            <Input\n                errorMessage={props.errorMsg}\n                classes={classes.InviteForm__input}\n                placeholder=\"Имя пользователя\" />\n            <button className={classes.InviteForm__sendBtn}  onClick={(evt) => {sendInvite(evt, props.inviteFrom, props.roomNumber)}} type=\"submit\">Отправить приглашение</button>\n        </form>\n    );\n};","import React from 'react';\n\nimport Title from '../Title/Title';\nimport Messages from '../Messages/Messages';\nimport SendMessage from '../SendMessage/SendMessage';\nimport InviteForm from '../InviteForm/InviteForm';\nimport { sendMessage, getSocket } from '../../server/clientServer';\n\nconst socket = getSocket();\n\n\nclass Room extends React.Component {\n\n    constructor(props) {\n        const initialstate = {\n            messages: [],\n            user: props.user,\n            room: props.room,\n            errMsg: ''\n        }\n        super(initialstate);\n\n        this.state = {\n            ...initialstate\n        }\n    };\n\n    componentWillUpdate(nextProps) {\n        const messagesList = document.querySelector('.' + nextProps.className + ' ' + 'ul');\n        messagesList.scrollTop = messagesList.scrollHeight;\n    };\n\n    componentDidMount() {\n        socket.on('newMessage', (data) => {\n            const state = this.state;\n            if(data.room === this.state.room.id) {\n                state.messages.push(data);\n                this.setState({\n                   ...state\n                 });\n            }\n        });\n\n        socket.on('userNotFound', (data) => {\n            const state = this.state;\n            state.errMsg = data.text;\n            this.setState({\n                ...state\n              });\n        });\n    };\n\n    onSubmitMessage = (evt) => {\n        evt.preventDefault();\n        let state = this.state;\n        const form = evt.target;\n        const inputMessage = form.querySelector('input');\n\n        if(inputMessage.value.trim() !== '') {\n            const date = new Date();\n            const msg = {\n                name: state.user.name,\n                room: state.room.id,\n                text: inputMessage.value,\n                time: {\n                    hours: date.getHours(),\n                    minutes: date.getMinutes()\n                }\n            };\n\n            sendMessage(msg);\n    \n            inputMessage.value = '';\n        }\n    };\n\n    render() {\n        return(\n          <main\n            className={this.props.className} \n            room={this.props.room.id} \n          >\n            <Title \n                title={this.props.room.id}\n                users={this.props.room.users}\n                 />\n            <InviteForm\n                roomNumber={this.state.room.id}\n                inviteFrom={this.state.user.name}\n                errorMsg={this.state.errMsg}\n                />\n            <Messages messages={this.state.messages} />\n            <SendMessage onSubmitMessage={this.onSubmitMessage} />\n          </main>\n        );\n    };\n};\n\nexport default Room;","import React from 'react';\nimport classes from './RoomList.module.scss';\n\nexport default props => {\n    return(\n        <nav className={classes.ChatList}>\n            <h2 className=\"visually-hidden\">Список комнат</h2>\n            <ul>\n                {props.rooms.map(room => {\n                    return(\n                        <li className={classes.ChatList__item} key={room.id}>\n                            <a\n                            onClick={props.onLinkClick} \n                            id={room.id}\n                            >\n                                {room.id}\n                            </a>\n                        </li>\n                    )\n                })}\n            </ul>\n        </nav>\n    );\n};","import React from 'react';\n\nimport Room from '../../components/Room/Room';\nimport RoomList from '../../components/RoomList/RoomList';\nimport classes from './MainScreen.module.scss';\nimport { getSocket } from '../../server/clientServer';\n\nconst socket = getSocket();\n\nclass MainScreen extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeRoom: props.user.rooms[0].id,\n            loading: false,\n            user: props.user\n        };\n    };\n\n    componentDidMount() {\n        socket.on('newInvite', (data) => {\n            const state = this.state;\n            state.user.rooms.push(data);\n            this.setState({\n                ...state\n            });\n        });\n\n        socket.on('userConnected', (data) => {\n            const state = this.state;\n            const room = state.user.rooms.find((room) => room.id === data.id);\n            room.users = data.users;\n            state.inviteForm = false;\n            this.setState({\n                ...state\n            })\n        });\n\n        socket.on('userDisconnected', (data) => {\n            const state = this.state;\n            state.user.rooms.forEach((room) => {\n                room.users = room.users.filter((user) => user !== data);\n            })\n\n            this.setState({\n                ...state\n            })\n        });\n    };\n\n    renderChats = () => {   \n        return(\n            this.state.user.rooms.map((room, index) => {\n                let className = {};\n\n                (room.id === +this.state.activeRoom)\n                ?\n                className = classes.MainScreen__chat\n                :\n                className = classes.MainScreen__chatHidden\n\n                return(\n                    <Room\n                        className={className} \n                        user={this.state.user}\n                        room={room}\n                        key={index + room.id}\n                    />\n                )\n            })\n        );\n    };\n\n    onLinkClick = (evt) => {\n        const activeRoom= evt.target.getAttribute('id');\n        this.setState({\n            activeRoom\n        })\n    };\n\n    render() {\n        return(\n          <div className={classes.MainScreen}>\n             <div className={classes.MainScreen__container}>\n                {\n                    this.state.loading\n                    ? null\n                    : <React.Fragment>\n                        <RoomList\n                        rooms = {this.state.user.rooms}\n                        onLinkClick = {(evt) => {this.onLinkClick(evt)}}\n                        />\n                        {this.renderChats()}\n                    </React.Fragment>\n                }\n             </div>\n          </div>\n        );\n    };\n};\n\nexport default MainScreen;","import React from 'react';\nimport EnterScreen from './containers/EnterScreen/EnterScreen';\nimport MainScreen from './containers/MainScreen/MainScreen';\nimport { registerNewUser } from './server/clientServer';\n\nclass App extends React.Component {\n\n  state = {\n    isLogged: false,\n    user: {\n      id: null,\n      name: '',\n      rooms: []\n    },\n    errorMessage: ''\n  };\n\n  componentDidMount() {\n\n  };\n\n  onLoginClick = (evt) => {\n    evt.preventDefault();\n    const state = this.state;\n\n    registerNewUser(state.user.name, state.user.room)\n      .then((data) => {\n        state.isLogged = true;\n        state.user.id= data.userId;\n        state.user.rooms.push(data.room);\n      })\n      .catch((err) => {\n        state.isLogged = false;\n        state.user.name = '';\n        state.user.rooms = [];\n        state.errorMessage = err;\n      })\n      .finally(() => {\n        this.setState({\n          ...state\n        });\n      })\n  };\n\n  onInputLoginChange = (value) => {\n    const state = this.state;\n    state.user.name = value;\n    this.setState({\n      state\n    })\n  };\n\n  render() {\n    return(\n      <div className=\"App\">\n        { this.state.isLogged ? \n        <MainScreen user={this.state.user} /> \n        : \n        <EnterScreen \n          onLoginClick={this.onLoginClick}\n          onInputLoginChange={this.onInputLoginChange}\n          errorMessage = {this.state.errorMessage} />}\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Title\":\"Title_Title__2JDeu\",\"Title__btnInvite\":\"Title_Title__btnInvite__PUKdV\",\"Title__btnMembers\":\"Title_Title__btnMembers__ji2oK\",\"Title__btnWrapper\":\"Title_Title__btnWrapper__2MaYR\"};"],"sourceRoot":""}